#!/usr/bin/env python
# -*- coding: utf-8 -*-


import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from std_msgs.msg import UInt8, Float64
from sensor_msgs.msg import Image, CompressedImage
from dynamic_reconfigure.server import Server
from racecar_detect.cfg import DetectLaneParamsConfig

class DetectLane():
    def __init__(self):
        self.hue_white_l = rospy.get_param("~detect/lane/white/hue_l", 0)
        self.hue_white_h = rospy.get_param("~detect/lane/white/hue_h", 25)
        self.saturation_white_l = rospy.get_param("~detect/lane/white/saturation_l", 0)
        self.saturation_white_h = rospy.get_param("~detect/lane/white/saturation_h", 36)
        self.lightness_white_l = rospy.get_param("~detect/lane/white/lightness_l", 180)
        self.lightness_white_h = rospy.get_param("~detect/lane/white/lightness_h", 255)

        self.is_calibration_mode = rospy.get_param("~is_detection_calibration_mode", False)

        if self.is_calibration_mode == True:
            srv_detect_lane = Server(DetectLaneParamsConfig, self.cbGetDetectLaneParam)

        self.sub_image_type = "raw"         # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed"  # you can choose image type "compressed", "raw"

        # subscribes raw image:/camera/image_projected_compensated
        self.sub_image_original = rospy.Subscriber('MVCamera/image_raw', Image, self.cbFindLane, queue_size = 1)

        # publishes lane image in compressed type 
        self.pub_image_lane = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
        
        if self.is_calibration_mode == True:
            # publishes lane image in compressed type 
            self.pub_image_right = rospy.Publisher('/detect/image_output_sub1/compressed', CompressedImage, queue_size = 1)
            self.pub_image_left = rospy.Publisher('/detect/image_output_sub2/compressed', CompressedImage, queue_size = 1)

        # output :raw 
        self.pub_lane = rospy.Publisher('/detect/lane', Float64, queue_size = 1)

        # subscribes state : left line reliability
        self.pub_left_line_reliability = rospy.Publisher('/detect/left_line_reliability', UInt8, queue_size=1)
 
        # subscribes state : right line reliability
        self.pub_right_line_reliability = rospy.Publisher('/detect/right_line_reliability', UInt8, queue_size=1)
 
        self.cvBridge = CvBridge()

        self.counter = 1

        self.window_width = 1000.
        self.window_height = 600.

        self.reliability_right_line = 100
        self.reliability_left_line = 100

    def cbGetDetectLaneParam(self, config, level):
        rospy.loginfo("[Detect Lane] Detect Lane Calibration Parameter reconfigured to")
        rospy.loginfo("hue_white_l : %d", config.hue_white_l)
        rospy.loginfo("hue_white_h : %d", config.hue_white_h)
        rospy.loginfo("saturation_white_l : %d", config.saturation_white_l)
        rospy.loginfo("saturation_white_h : %d", config.saturation_white_h)
        rospy.loginfo("lightness_white_l : %d", config.lightness_white_l)
        rospy.loginfo("lightness_white_h : %d", config.lightness_white_h)

        self.hue_white_l = config.hue_white_l
        self.hue_white_h = config.hue_white_h
        self.saturation_white_l = config.saturation_white_l
        self.saturation_white_h = config.saturation_white_h
        self.lightness_white_l = config.lightness_white_l
        self.lightness_white_h = config.lightness_white_h

        return config

    def cbFindLane(self, image_msg):
        # TODO: mov_avg error
        # 
        # Change the frame rate by yourself. Now, it is set to 1/3 (10fps). 
        # Unappropriate value of frame rate may cause huge delay on entire recognition process.
        # This is up to your computer's operating power.
        if self.counter % 3 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1
        
        # 转化为Opencv下的彩色图像
        cv_image = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

        # find right and left Lane(cv_image)
        right_fraction, cv_right_lane = self.maskRightLane(cv_image)
        left_fraction, cv_left_lane = self.maskLeftLane(cv_image)

        try:
            if left_fraction > 3000:
                self.left_fitx, self.left_fit = self.fit_from_lines(self.left_fit, cv_left_lane)
                self.mov_avg_left = np.append(self.mov_avg_left,np.array([self.left_fit]), axis=0)

            if right_fraction > 3000:
                self.right_fitx, self.right_fit = self.fit_from_lines(self.right_fit, cv_right_lane)
                self.mov_avg_right = np.append(self.mov_avg_right,np.array([self.right_fit]), axis=0)
        except:
            if left_fraction > 3000:
                self.left_fitx, self.left_fit = self.sliding_windown(cv_left_lane, 'left')
                self.mov_avg_left = np.array([self.left_fit])

            if right_fraction > 3000:
                self.right_fitx, self.right_fit = self.sliding_windown(cv_right_lane, 'right')
                self.mov_avg_right = np.array([self.right_fit])

        MOV_AVG_LENGTH = 5

        self.left_fit = np.array([np.mean(self.mov_avg_left[::-1][:, 0][0:MOV_AVG_LENGTH]),
                            np.mean(self.mov_avg_left[::-1][:, 1][0:MOV_AVG_LENGTH]),
                            np.mean(self.mov_avg_left[::-1][:, 2][0:MOV_AVG_LENGTH])])
        self.right_fit = np.array([np.mean(self.mov_avg_right[::-1][:, 0][0:MOV_AVG_LENGTH]),
                            np.mean(self.mov_avg_right[::-1][:, 1][0:MOV_AVG_LENGTH]),
                            np.mean(self.mov_avg_right[::-1][:, 2][0:MOV_AVG_LENGTH])])

        if self.mov_avg_left.shape[0] > 1000:
            self.mov_avg_left = self.mov_avg_left[0:MOV_AVG_LENGTH]

        if self.mov_avg_right.shape[0] > 1000:
            self.mov_avg_right = self.mov_avg_right[0:MOV_AVG_LENGTH]

        self.make_lane(cv_image, right_fraction, left_fraction)

    def maskRightLane(self, image):
        mask0 = np.zeros(image.shape[0:2], dtype = "uint8")
        # ------------------------    May 5 255->(255,255,255)    ---------------------
        cv2.rectangle(mask0, (image.shape[1]//2, 0), (image.shape[1], image.shape[0]), (255,255,255), -1)
        im = cv2.bitwise_and(image, image, mask=mask0)
        # 输入原始图像，返回白色部分数目和掩膜矩阵，发布掩膜的jpg图像
        # Convert BGR to HSV
        hsv = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)

        Hue_l = self.hue_white_l
        Hue_h = self.hue_white_h
        Saturation_l = self.saturation_white_l
        Saturation_h = self.saturation_white_h
        Lightness_l = self.lightness_white_l
        Lightness_h = self.lightness_white_h

        # define range of white color in HSV
        lower_right = np.array([Hue_l, Saturation_l, Lightness_l])
        upper_right = np.array([Hue_h, Saturation_h, Lightness_h])

        # Threshold the HSV image to get only white colors:对hsv，低于lower_white和高于upper_white的像素置0,即白色为255,非白为0
        mask = cv2.inRange(hsv, lower_right, upper_right)

        # Bitwise-AND mask and original image,膜与原图与运算，除了白色部分，其余为黑色
        res = cv2.bitwise_and(im, im, mask = mask)

        # 数出膜中非0个数，即白色像素个数
        fraction_num = np.count_nonzero(mask)

        # num大了就提高L阈值，小了就降低L阈值
        if self.is_calibration_mode == False:
            if fraction_num > 35000:
                if self.lightness_white_l < 250:
                    self.lightness_white_l += 5
            elif fraction_num < 5000:
                if self.lightness_white_l > 50:
                    self.lightness_white_l -= 5

        how_much_short = 0

        # 遍历图像每一行
        for i in range(0, 480):
            if np.count_nonzero(mask[i,::]) > 0:
                how_much_short += 1

        # 为全黑的行的数目（断行）
        how_much_short = 480 - how_much_short

        if how_much_short > 100:
            if self.reliability_right_line >= 5:
                self.reliability_right_line -= 5
        elif how_much_short <= 100:
            if self.reliability_right_line <= 99:
                self.reliability_right_line += 5

        msg_white_line_reliability = UInt8()
        msg_white_line_reliability.data = self.reliability_right_line
        self.pub_right_line_reliability.publish(msg_white_line_reliability)

        if self.is_calibration_mode == True:
        #mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
        # error1 : CvBridgeError: encoding specified as bgr8, but image has incompatible type 8UC1
        # publishes white lane filtered image in compressed type
            self.pub_image_right.publish(self.cvBridge.cv2_to_compressed_imgmsg(mask, "jpg"))

        return fraction_num, mask

    def maskLeftLane(self, image):
        mask0 = np.zeros(image.shape[0:2], dtype = "uint8")
        cv2.rectangle(mask0, (0, 0), (image.shape[1]//2, image.shape[0]), (255,255,255), -1)
        im = cv2.bitwise_and(image, image, mask=mask0)
        # Convert BGR to HSV
        hsv = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)

        Hue_l = self.hue_white_l
        Hue_h = self.hue_white_h
        Saturation_l = self.saturation_white_l
        Saturation_h = self.saturation_white_h
        Lightness_l = self.lightness_white_l
        Lightness_h = self.lightness_white_h

        # define range of left color in HSV
        lower_left = np.array([Hue_l, Saturation_l, Lightness_l])
        upper_left = np.array([Hue_h, Saturation_h, Lightness_h])

        # Threshold the HSV image to get only left colors
        mask = cv2.inRange(hsv, lower_left, upper_left)

        # Bitwise-AND mask and original image
        res = cv2.bitwise_and(im, im, mask = mask)

        fraction_num = np.count_nonzero(mask)

        if self.is_calibration_mode == False:
            if fraction_num > 35000:
                if self.lightness_left_l < 250:
                    self.lightness_left_l += 20
            elif fraction_num < 5000:
                if self.lightness_left_l > 90:
                    self.lightness_left_l -= 20

        how_much_short = 0

        for i in range(0, 480):
            if np.count_nonzero(mask[i,::]) > 0:
                how_much_short += 1
        
        how_much_short = 480 - how_much_short

        if how_much_short > 100:
            if self.reliability_left_line >= 5:
                self.reliability_left_line -= 5
        elif how_much_short <= 100:
            if self.reliability_left_line <= 99:
                self.reliability_left_line += 5

        msg_left_line_reliability = UInt8()
        msg_left_line_reliability.data = self.reliability_left_line
        self.pub_left_line_reliability.publish(msg_left_line_reliability)

        #----------------------------   May 4   ------------------------------
        #mask = cv2.cvtColor(mask, cv2.COLOR_GRAY2BGR)
        if self.is_calibration_mode == True:
            # publishes left lane filtered image in compressed type
            self.pub_image_left.publish(self.cvBridge.cv2_to_compressed_imgmsg(mask, "jpg"))

        return fraction_num, mask

    def fit_from_lines(self, lane_fit, image):
        nonzero = image.nonzero()
        nonzeroy = np.array(nonzero[0])
        nonzerox = np.array(nonzero[1])
        margin = 100
        lane_inds = ((nonzerox > (lane_fit[0] * (nonzeroy ** 2) + lane_fit[1] * nonzeroy + lane_fit[2] - margin)) & (
        nonzerox < (lane_fit[0] * (nonzeroy ** 2) + lane_fit[1] * nonzeroy + lane_fit[2] + margin)))

        # Again, extract line pixel positions
        x = nonzerox[lane_inds]
        y = nonzeroy[lane_inds]

        # Fit a second order polynomial to each
        lane_fit = np.polyfit(y, x, 2)

        # Generate x and y values for plotting
        ploty = np.linspace(0, image.shape[0] - 1, image.shape[0])
        lane_fitx = lane_fit[0] * ploty ** 2 + lane_fit[1] * ploty + lane_fit[2]
            
        return lane_fitx, lane_fit

    def sliding_windown(self, img_w, left_or_right):
        histogram = np.sum(img_w[int(img_w.shape[0] / 2):, :], axis=0)

        # Create an output image to draw on and visualize the result
        out_img = np.dstack((img_w, img_w, img_w)) * 255

        # Find the peak of the left and right halves of the histogram
        # These will be the starting point for the left and right lines
        midpoint = np.int(histogram.shape[0] / 2)

        if left_or_right == 'left':
            lane_base = np.argmax(histogram[:midpoint])
        elif left_or_right == 'right':
            lane_base = np.argmax(histogram[midpoint:]) + midpoint

        # Choose the number of sliding windows
        nwindows = 20

        # Set height of windows
        window_height = np.int(img_w.shape[0] / nwindows)

        # Identify the x and y positions of all nonzero pixels in the image
        nonzero = img_w.nonzero()
        nonzeroy = np.array(nonzero[0])
        nonzerox = np.array(nonzero[1])

        # Current positions to be updated for each window
        x_current = lane_base

        # Set the width of the windows +/- margin
        margin = 50

        # Set minimum number of pixels found to recenter window
        minpix = 50

        # Create empty lists to receive lane pixel indices
        lane_inds = []

        # Step through the windows one by one
        for window in range(nwindows):
            # Identify window boundaries in x and y
            win_y_low = img_w.shape[0] - (window + 1) * window_height
            win_y_high = img_w.shape[0] - window * window_height
            win_x_low = x_current - margin
            win_x_high = x_current + margin

            # Draw the windows on the visualization image
            cv2.rectangle(out_img, (win_x_low, win_y_low), (win_x_high, win_y_high), (0, 255, 0), 2)

            # Identify the nonzero pixels in x and y within the window
            good_lane_inds = ((nonzeroy >= win_y_low) & (nonzeroy < win_y_high) & (nonzerox >= win_x_low) & (
                nonzerox < win_x_high)).nonzero()[0]

            # Append these indices to the lists
            lane_inds.append(good_lane_inds)

            # If you found > minpix pixels, recenter next window on their mean position
            if len(good_lane_inds) > minpix:
                x_current = np.int(np.mean(nonzerox[good_lane_inds]))

        # Concatenate the arrays of indices
        lane_inds = np.concatenate(lane_inds)

        # Extract line pixel positions
        x = nonzerox[lane_inds]
        y = nonzeroy[lane_inds]

        # Fit a second order polynomial to each
        try:
            lane_fit = np.polyfit(y, x, 2)
            self.lane_fit_bef = lane_fit
        except:
            lane_fit = self.lane_fit_bef

        # Generate x and y values for plotting
        ploty = np.linspace(0, img_w.shape[0] - 1, img_w.shape[0])
        lane_fitx = lane_fit[0] * ploty ** 2 + lane_fit[1] * ploty + lane_fit[2]

        return lane_fitx, lane_fit

    def make_lane(self, cv_image, right_fraction, left_fraction):
        # Create an image to draw the lines on
        warp_zero = np.zeros((cv_image.shape[0], cv_image.shape[1], 1), dtype=np.uint8)

        color_warp = np.dstack((warp_zero, warp_zero, warp_zero))
        color_warp_lines = np.dstack((warp_zero, warp_zero, warp_zero))

        ploty = np.linspace(0, cv_image.shape[0] - 1, cv_image.shape[0])

        if left_fraction > 3000:
            pts_left = np.array([np.flipud(np.transpose(np.vstack([self.left_fitx, ploty])))])
            cv2.polylines(color_warp_lines, np.int_([pts_left]), isClosed=False, color=(0, 0, 255), thickness=25)

        if right_fraction > 3000:
            pts_right = np.array([np.transpose(np.vstack([self.right_fitx, ploty]))])
            cv2.polylines(color_warp_lines, np.int_([pts_right]), isClosed=False, color=(255, 255, 0), thickness=25)
        
        self.is_center_x_exist = True

        if self.reliability_right_line > 50 and self.reliability_left_line > 50:   
            if right_fraction > 3000 and left_fraction > 3000:
                centerx = np.mean([self.left_fitx, self.right_fitx], axis=0)
                pts = np.hstack((pts_left, pts_right))
                pts_center = np.array([np.transpose(np.vstack([centerx, ploty]))])

                cv2.polylines(color_warp_lines, np.int_([pts_center]), isClosed=False, color=(0, 255, 255), thickness=12)

                # Draw the lane onto the warped blank image
                cv2.fillPoly(color_warp, np.int_([pts]), (0, 255, 0))

            if right_fraction > 3000 and left_fraction <= 3000:
                centerx = np.subtract(self.right_fitx, 320)
                pts_center = np.array([np.transpose(np.vstack([centerx, ploty]))])

                cv2.polylines(color_warp_lines, np.int_([pts_center]), isClosed=False, color=(0, 255, 255), thickness=12)

            if right_fraction <= 3000 and left_fraction > 3000:
                centerx = np.add(self.left_fitx, 320)
                pts_center = np.array([np.transpose(np.vstack([centerx, ploty]))])

                cv2.polylines(color_warp_lines, np.int_([pts_center]), isClosed=False, color=(0, 255, 255), thickness=12)

        elif self.reliability_right_line <= 50 and self.reliability_left_line > 50:
            centerx = np.add(self.left_fitx, 320)
            pts_center = np.array([np.transpose(np.vstack([centerx, ploty]))])

            cv2.polylines(color_warp_lines, np.int_([pts_center]), isClosed=False, color=(0, 255, 255), thickness=12)

        elif self.reliability_right_line > 50 and self.reliability_left_line <= 50:
            centerx = np.subtract(self.right_fitx, 320)
            pts_center = np.array([np.transpose(np.vstack([centerx, ploty]))])

            cv2.polylines(color_warp_lines, np.int_([pts_center]), isClosed=False, color=(0, 255, 255), thickness=12)

        else:
            self.is_center_x_exist = False
            # TODO: stop
            pass

        # Combine the result with the original image
        final = cv2.addWeighted(cv_image, 1, color_warp, 0.2, 0)
        final = cv2.addWeighted(final, 1, color_warp_lines, 1, 0)

        if self.is_center_x_exist == True:
            # publishes lane center
            msg_desired_center = Float64()
            msg_desired_center.data = centerx.item(350)
            self.pub_lane.publish(msg_desired_center)

        self.pub_image_lane.publish(self.cvBridge.cv2_to_compressed_imgmsg(final, "jpg"))



    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_lane')
    node = DetectLane()
    node.main()
